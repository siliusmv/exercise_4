knitr::opts_chunk$set(echo = TRUE, cache = TRUE, autodep = TRUE, warning = FALSE, message = FALSE, error = FALSE, out.width = "70%", fig.align = "center")
knn_class <- read("dataset/dataset/knn_classification.csv")
knn_class <- read.csv2("dataset/dataset/knn_classification.csv")
knn_class
knn_class$x1.x2.x3.x4.y
knn_class <- read.csv("dataset/dataset/knn_classification.csv")
knn_class$x1.x2.x3.x4.y
knn_class$x1
knn_class
# Extract data
knn_class <- read.csv("dataset/dataset/knn_classification.csv")
knn_reg <- read.csv("dataset/dataset/knn_regression.csv")
ada_train <- read.csv("dataset/dataset/adaboost_train.csv")
ada_test <- read.csv("dataset/dataset/adaboost_test.csv")
knn_class
head(knn_class)
aaa <- knn_class[, 1:4]
aaa <- matrix(aaa)
aaa
aaa <- knn_class[, 1:4]
aaa
aaa <- as.matrix(aaa)
aaa
is.data.frame(knn_class)
aaa
bbb <- aaa[141,]
bbb
? apply
dim(aaa)
apply(aaa, 1, sum)
# Euclidian distance function
eucDist <- function(all_points, point){
res <- (all_points - point)^2
res <- apply(res, 1, sum)
res <- sqrt(res)
return(res)
}
eucDist(aaa, bbb)
eucDist(aaa, bbb) -> ccc
min(ccc)
aaa
aa <- aaa[1:10,]
aa
bb <- aa[4,]
bb
aa - bb
apply(aa, 1, -bb)
?sweep
aa
sweep(aa, 2, bb)
sweep(aa, 1, bb)
sweep(aa, 2, bb)
apply(aa, 2, sweep(bb))
apply(aa, 2, -, bb)
apply(aa, 2, "-", bb)
apply(aa, 1, "-", bb)
sweep(aa, 2, bb, "-")
aa
apply(aa, 1, "^2")
apply(aa, 1, "^", 2)
aa^2
# Euclidian distance function
eucDist <- function(all_points, point){
res <- sweep(all_points, 2, point, "-")
res <- res^2
res <- apply(res, 1, sum)
res <- sqrt(res)
return(res)
}
eucDist(aa, bb)
sort(eucDist(aa, bb))
eucDist(aa, bb) -> cc
cc
order(cc)
order(cc, decreasing = FALSE)
order(cc, decreasing = TRUE)
order(cc, decreasing = TRUE) <- cccc
order(cc, decreasing = TRUE) -> cccc
cc[cccc]
order(cc, decreasing = FALSE) -> cccc
order(cc) -> cccc
cc[cccc]
as <- c(1,2,3,4,5)
as[c(3,1,2,5,4)]
as[c(3,1,2,5,4)][1:3]
# Find k nearest neighbours
findKnn <- function(all_points, point, distFunc, k, val){
distances <- distFunc(all_points, point)
ord <- order(distances)
res <- list(distances = distances[1:k],
values = val[ord][1:k])
return(res)
}
knn_reg %>% head()
library(dplyr)
knn_reg %>% head()
knn_class[123,]
knn_class[120:130,]
knn_reg[124,]
knn_class[124,]
knn_reg[1, ]
knn_reg
data <- knn_class
all_points <- as.matrix(data[, -dim(data)[2]])
val <- data[, dim(data)[2]]
all_points
val
data <- knn_reg
source('~/Documents/8. semester/maskinlæring/exercises/exercise_4/code.R')
data
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, autodep = TRUE, warning = FALSE, message = FALSE, error = FALSE, out.width = "70%", fig.align = "center")
source("code.R")
knitr::read_chunk("code.R")
knnReg(k = 10,
data = knn_reg,
point = knn_reg[124, 1:3])
k <- 10
data <- knn_reg
point <- knn_reg[124, 1:3]
point
data
all_points <- as.matrix(data[, -dim(data)[2]])
values <- data[, dim(data)[2]]
closest <- findKnn(all_points = all_points,
point = point,
k = k,
values = values,
distFunc = eucDist)
distFunc <- eucDist
distances <- distFunc(all_points, point)
res <- sweep(all_points, 2, point, "-")
all_points
is.matrix(all_points)
point
is.matrix(point)
type(point)
is.vector(point)
View(point)
knnReg(k = 10,
data = knn_reg,
point = as.vector(knn_reg[124, 1:3]))
point <- as.vector(point)
point
res <- sweep(all_points, 2, point, "-")
sweep(aa, 2, bb, "-")
point
as.vector(point)
as.matrix(point)
as.vector(as.matrix(point))
knnReg(k = 10,
)
point <- as.vector(as.matrix(point))
point
res <- sweep(all_points, 2, point, "-")
res <- res^2
res <- apply(res, 1, sum)
res <- sqrt(res)
res
distances <- distFunc(all_points, point)
ord <- order(distances)
res <- list(distances = distances[1:k],
values = values[ord][1:k])
all_points <- as.matrix(data[, -dim(data)[2]])
values <- data[, dim(data)[2]]
closest <- findKnn(all_points = all_points,
point = point,
k = k,
values = values,
distFunc = eucDist)
closest
mean(closest$values)
knnReg(k = 10,
data = knn_reg,
point = as.vector(as.matrix((knn_reg[124, 1:3]))))
type <- "reg"
type == "reg"
error
aaaa <- c(1,1,1,1,2,2)
aaaa
table(aaaa)
res <- tables(aaaa)
res <- table(aaaa)
res
res[1]
res[1, 1]
res[1]
res[2]
res[2][2]
res[2,1]
res[2][[]]
res[2] + 3
as.numeric(res[2])
table(c("a", "a", "b", "a"))
table(c("a", "a", "b", "a")) ->dd
dd[1]
name(dd[1])
names(dd)
res
names(res)
order(dd)
dd[order(dd)]
max(dd)
source('~/Documents/8. semester/maskinlæring/exercises/exercise_4/code.R')
knn(k = 10,
data = knn_reg,
point = as.vector(as.matrix((knn_reg[124, 1:3]))),
type = "reg")
knn(k = 10,
data = knn_class,
point = as.vector(as.matrix((knn_class[124, 1:4]))),
type = "class")
install.packages("reticulate")
library(reticulate)
Sys.which("python")
getwd()
aaa <- table(c(2,2,2,3,3,3))
aaa <- table(c(2,2,2,3,3,3, 1, 5))
aaa
which(aaa==3)
which(aaa==3) -> bbb
bbb[1]
bb[2]
bbb[2]
aaa <- table(c(2,2,2,3,3,3, 1, 5, 0))
aaa
aaa <- table(c(2,2,2,2,3,3, 3,3, 1, 5, 0))
aaa
which(aaa == 4) -> bbb
bbb
aaa[bbb]
which(names(aaa) == "2")
which(names(aaa) == "0")
which(names(aaa) == "4")
source('~/Documents/8. semester/maskinlæring/exercises/exercise_4/code.R')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, autodep = TRUE, warning = FALSE, message = FALSE, error = FALSE, out.width = "70%", fig.align = "center")
source("code.R")
knitr::read_chunk("code.R")
library(reticulate)
knn(k = 10,
data = knn_reg,
point = as.vector(as.matrix((knn_reg[124, 1:3]))),
type = "reg")
# Extract data
knn_class <- read.csv("dataset/dataset/knn_classification.csv")
knn_reg <- read.csv("dataset/dataset/knn_regression.csv")
ada_train <- read.csv("dataset/dataset/adaboost_train.csv")
ada_test <- read.csv("dataset/dataset/adaboost_test.csv")
knn(k = 10,
data = knn_reg,
point = as.vector(as.matrix((knn_reg[124, 1:3]))),
type = "reg")
knn(k = 10,
data = knn_class,
point = as.vector(as.matrix((knn_class[124, 1:4]))),
type = "class")
head(ada_test)
head(ada_train)
135 * 31
